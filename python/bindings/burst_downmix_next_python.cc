/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(burst_downmix_next.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(bd3e6509aa1d33caabdce6b13ea519fd)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <iridium/burst_downmix_next.h>
// pydoc.h is automatically generated in the build directory
#include <burst_downmix_next_pydoc.h>

void bind_burst_downmix_next(py::module& m)
{

    using burst_downmix_next    = ::gr::iridium::burst_downmix_next;


    py::class_<burst_downmix_next, gr::block, gr::basic_block,
        std::shared_ptr<burst_downmix_next>>(m, "burst_downmix_next", D(burst_downmix_next))

        .def(py::init(&burst_downmix_next::make),
           py::arg("output_sample_rate"),
           py::arg("search_depth"),
           py::arg("hard_max_queue_len"),
           py::arg("input_taps"),
           py::arg("start_finder_taps"),
           py::arg("handle_multiple_frames_per_burst"),
           D(burst_downmix_next,make)
        )
        




        
        .def("get_n_dropped_bursts",&burst_downmix_next::get_n_dropped_bursts,       
            D(burst_downmix_next,get_n_dropped_bursts)
        )


        
        .def("get_input_queue_size",&burst_downmix_next::get_input_queue_size,       
            D(burst_downmix_next,get_input_queue_size)
        )


        
        .def("debug_id",&burst_downmix_next::debug_id,       
            py::arg("id"),
            D(burst_downmix_next,debug_id)
        )

        ;




}








